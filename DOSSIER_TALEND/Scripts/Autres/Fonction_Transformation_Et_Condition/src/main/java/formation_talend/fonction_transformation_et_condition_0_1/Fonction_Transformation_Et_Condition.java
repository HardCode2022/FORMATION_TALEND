// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package formation_talend.fonction_transformation_et_condition_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.Traitement_Salaire;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Fonction_Transformation_Et_Condition Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Fonction_Transformation_Et_Condition implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Inputs != null){
				
					this.setProperty("Inputs", Inputs.toString());
				
			}
			
			if(Outputs != null){
				
					this.setProperty("Outputs", Outputs.toString());
				
			}
			
			if(Connexion_Postgres_Database != null){
				
					this.setProperty("Connexion_Postgres_Database", Connexion_Postgres_Database.toString());
				
			}
			
			if(Connexion_Postgres_Password != null){
				
					this.setProperty("Connexion_Postgres_Password", Connexion_Postgres_Password.toString());
				
			}
			
			if(Connexion_Postgres_Login != null){
				
					this.setProperty("Connexion_Postgres_Login", Connexion_Postgres_Login.toString());
				
			}
			
			if(Connexion_Postgres_Port != null){
				
					this.setProperty("Connexion_Postgres_Port", Connexion_Postgres_Port.toString());
				
			}
			
			if(Connexion_Postgres_Server != null){
				
					this.setProperty("Connexion_Postgres_Server", Connexion_Postgres_Server.toString());
				
			}
			
			if(Connexion_Postgres_Schema != null){
				
					this.setProperty("Connexion_Postgres_Schema", Connexion_Postgres_Schema.toString());
				
			}
			
		}

		public String Inputs;
		public String getInputs(){
			return this.Inputs;
		}
		
		public String Outputs;
		public String getOutputs(){
			return this.Outputs;
		}
		
public String Connexion_Postgres_Database;
public String getConnexion_Postgres_Database(){
	return this.Connexion_Postgres_Database;
}
public java.lang.String Connexion_Postgres_Password;
public java.lang.String getConnexion_Postgres_Password(){
	return this.Connexion_Postgres_Password;
}
public String Connexion_Postgres_Login;
public String getConnexion_Postgres_Login(){
	return this.Connexion_Postgres_Login;
}
public String Connexion_Postgres_Port;
public String getConnexion_Postgres_Port(){
	return this.Connexion_Postgres_Port;
}
public String Connexion_Postgres_Server;
public String getConnexion_Postgres_Server(){
	return this.Connexion_Postgres_Server;
}
public String Connexion_Postgres_Schema;
public String getConnexion_Postgres_Schema(){
	return this.Connexion_Postgres_Schema;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Fonction_Transformation_Et_Condition";
	private final String projectName = "FORMATION_TALEND";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Fonction_Transformation_Et_Condition.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Fonction_Transformation_Et_Condition.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSchemaComplianceCheck_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ingenieur_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_villes_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_2_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_2_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_2_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tPostgresqlConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		
    	class BytesLimit65535_tPostgresqlConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlConnection_1().limitLog4jByte();


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.Connexion_Postgres_Server+":"+context.Connexion_Postgres_Port+"/"+context.Connexion_Postgres_Database; 

	String dbUser_tPostgresqlConnection_1 = context.Connexion_Postgres_Login;
	
	
		
	final String decryptedPassword_tPostgresqlConnection_1 = context.Connexion_Postgres_Password; 
		String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
	

	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
		conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1",context.Connexion_Postgres_Schema);

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.Outputs+"INGENIEUR_DATA_TRAITER.xml");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.Outputs+"INGENIEUR_DATA_TRAITER.xml");
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String CARACTERISTIQUE_SALAIRE;

				public String getCARACTERISTIQUE_SALAIRE () {
					return this.CARACTERISTIQUE_SALAIRE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE = this.SALAIRE;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            other.CARACTERISTIQUE_SALAIRE = this.CARACTERISTIQUE_SALAIRE;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE = readInteger(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.CARACTERISTIQUE_SALAIRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.CARACTERISTIQUE_SALAIRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
		sb.append(",CARACTERISTIQUE_SALAIRE="+CARACTERISTIQUE_SALAIRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String CARACTERISTIQUE_SALAIRE;

				public String getCARACTERISTIQUE_SALAIRE () {
					return this.CARACTERISTIQUE_SALAIRE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_2 other = (OnRowsEndStructtSortRow_2) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_2 other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE = this.SALAIRE;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            other.CARACTERISTIQUE_SALAIRE = this.CARACTERISTIQUE_SALAIRE;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_2 other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE = readInteger(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.CARACTERISTIQUE_SALAIRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.CARACTERISTIQUE_SALAIRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
		sb.append(",CARACTERISTIQUE_SALAIRE="+CARACTERISTIQUE_SALAIRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_2 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DATA_TRAITEMENT_SALAIREStruct implements routines.system.IPersistableRow<DATA_TRAITEMENT_SALAIREStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String CARACTERISTIQUE_SALAIRE;

				public String getCARACTERISTIQUE_SALAIRE () {
					return this.CARACTERISTIQUE_SALAIRE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DATA_TRAITEMENT_SALAIREStruct other = (DATA_TRAITEMENT_SALAIREStruct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(DATA_TRAITEMENT_SALAIREStruct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE = this.SALAIRE;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            other.CARACTERISTIQUE_SALAIRE = this.CARACTERISTIQUE_SALAIRE;
	            
	}

	public void copyKeysDataTo(DATA_TRAITEMENT_SALAIREStruct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE = readInteger(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.CARACTERISTIQUE_SALAIRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.CARACTERISTIQUE_SALAIRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
		sb.append(",CARACTERISTIQUE_SALAIRE="+CARACTERISTIQUE_SALAIRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DATA_TRAITEMENT_SALAIREStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.SALAIRE = this.SALAIRE;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.SALAIRE = this.SALAIRE;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.SALAIRE = this.SALAIRE;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.SALAIRE = this.SALAIRE;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.SALAIRE = this.SALAIRE;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];

	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DATA_INGENIEURS_TRAITEStruct implements routines.system.IPersistableRow<DATA_INGENIEURS_TRAITEStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public Integer SALAIRE_TRAITER;

				public Integer getSALAIRE_TRAITER () {
					return this.SALAIRE_TRAITER;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DATA_INGENIEURS_TRAITEStruct other = (DATA_INGENIEURS_TRAITEStruct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(DATA_INGENIEURS_TRAITEStruct other) {

		other.id_Ing = this.id_Ing;
	            other.NOM_COMPLET = this.NOM_COMPLET;
	            other.SALAIRE_TRAITER = this.SALAIRE_TRAITER;
	            other.SALAIRE = this.SALAIRE;
	            other.AUGMENTION = this.AUGMENTION;
	            other.DATE_EMBAUCHE = this.DATE_EMBAUCHE;
	            other.VILLE = this.VILLE;
	            
	}

	public void copyKeysDataTo(DATA_INGENIEURS_TRAITEStruct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
						this.SALAIRE_TRAITER = readInteger(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.AUGMENTION = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
					this.VILLE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE_TRAITER,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",SALAIRE_TRAITER="+String.valueOf(SALAIRE_TRAITER));
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
		sb.append(",VILLE="+VILLE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DATA_INGENIEURS_TRAITEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DATA_INGENIEURSStruct implements routines.system.IPersistableRow<DATA_INGENIEURSStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];

	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String NOM_COMPLET;

				public String getNOM_COMPLET () {
					return this.NOM_COMPLET;
				}
				
			    public String AUGMENTION;

				public String getAUGMENTION () {
					return this.AUGMENTION;
				}
				
			    public Integer SALAIRE;

				public Integer getSALAIRE () {
					return this.SALAIRE;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DATE_EMBAUCHE;

				public String getDATE_EMBAUCHE () {
					return this.DATE_EMBAUCHE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition.length == 0) {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
					this.NOM_COMPLET = readString(dis);
					
					this.AUGMENTION = readString(dis);
					
						this.SALAIRE = readInteger(dis);
					
					this.VILLE = readString(dis);
					
					this.DATE_EMBAUCHE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// String
				
						writeString(this.NOM_COMPLET,dos);
					
					// String
				
						writeString(this.AUGMENTION,dos);
					
					// Integer
				
						writeInteger(this.SALAIRE,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.DATE_EMBAUCHE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",NOM_COMPLET="+NOM_COMPLET);
		sb.append(",AUGMENTION="+AUGMENTION);
		sb.append(",SALAIRE="+String.valueOf(SALAIRE));
		sb.append(",VILLE="+VILLE);
		sb.append(",DATE_EMBAUCHE="+DATE_EMBAUCHE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DATA_INGENIEURSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class situationStruct implements routines.system.IPersistableRow<situationStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];

	
			    public int id_situation;

				public int getId_situation () {
					return this.id_situation;
				}
				
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public int salaire;

				public int getSalaire () {
					return this.salaire;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_situation = dis.readInt();
					
			        this.id_Ing = dis.readInt();
					
			        this.salaire = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_situation);
					
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// int
				
		            	dos.writeInt(this.salaire);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_situation="+String.valueOf(id_situation));
		sb.append(",id_Ing="+String.valueOf(id_Ing));
		sb.append(",salaire="+String.valueOf(salaire));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(situationStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_1Struct implements routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];

	
			    public int id_situation;

				public int getId_situation () {
					return this.id_situation;
				}
				
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public int salaire;

				public int getSalaire () {
					return this.salaire;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_situation = dis.readInt();
					
			        this.id_Ing = dis.readInt();
					
			        this.salaire = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_situation);
					
					// int
				
		            	dos.writeInt(this.id_Ing);
					
					// int
				
		            	dos.writeInt(this.salaire);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_situation="+String.valueOf(id_situation));
		sb.append(",id_Ing="+String.valueOf(id_Ing));
		sb.append(",salaire="+String.valueOf(salaire));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);
		tPostgresqlInput_1Process(globalMap);

		situationStruct situation = new situationStruct();
DATA_INGENIEURSStruct DATA_INGENIEURS = new DATA_INGENIEURSStruct();
DATA_INGENIEURS_TRAITEStruct DATA_INGENIEURS_TRAITE = new DATA_INGENIEURS_TRAITEStruct();
row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
DATA_TRAITEMENT_SALAIREStruct DATA_TRAITEMENT_SALAIRE = new DATA_TRAITEMENT_SALAIREStruct();
row6Struct row6 = new row6Struct();








	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_1_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_1_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_1_SortOut().limitLog4jByte();


class Comparablerow2Struct extends row2Struct implements Comparable<Comparablerow2Struct> {
	
	public int compareTo(Comparablerow2Struct other) {

		if(this.SALAIRE_TRAITER == null && other.SALAIRE_TRAITER != null){
			return -1;
						
		}else if(this.SALAIRE_TRAITER != null && other.SALAIRE_TRAITER == null){
			return 1;
						
		}else if(this.SALAIRE_TRAITER != null && other.SALAIRE_TRAITER != null){
			if(!this.SALAIRE_TRAITER.equals(other.SALAIRE_TRAITER)){
				return this.SALAIRE_TRAITER.compareTo(other.SALAIRE_TRAITER);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow2Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow2Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tSchemaComplianceCheck_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSchemaComplianceCheck_1", false);
		start_Hash.put("tSchemaComplianceCheck_1", System.currentTimeMillis());
		
	
	currentComponent="tSchemaComplianceCheck_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSchemaComplianceCheck_1 = 0;
		
    	class BytesLimit65535_tSchemaComplianceCheck_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSchemaComplianceCheck_1().limitLog4jByte();

	class RowSetValueUtil_tSchemaComplianceCheck_1 {

		boolean ifPassedThrough = true;
		int errorCodeThrough = 0;
		String errorMessageThrough = "";
		int resultErrorCodeThrough = 0;
		String resultErrorMessageThrough = "";
		String tmpContentThrough = null;

		boolean ifPassed = true;
		int errorCode = 0;
		String errorMessage = "";

		void handleBigdecimalPrecision(String data, int iPrecision, int maxLength){
			//number of digits before the decimal point(ignoring frontend zeroes)
			int len1 = 0;
			int len2 = 0;
			ifPassed = true;
			errorCode = 0;
			errorMessage = "";
			if(data.startsWith("-")){
				data = data.substring(1);
			}
			data = org.apache.commons.lang.StringUtils.stripStart(data, "0");

			if(data.indexOf(".") >= 0){
				len1 = data.indexOf(".");
				data = org.apache.commons.lang.StringUtils.stripEnd(data, "0");
				len2 = data.length() - (len1 + 1);
			}else{
				len1 = data.length();
			}

			if (iPrecision < len2) {
				ifPassed = false;
				errorCode += 8;
				errorMessage += "|precision Non-matches";
			} else if (maxLength < len1 + iPrecision) {
				ifPassed = false;
				errorCode += 8;
				errorMessage += "|invalid Length setting is unsuitable for Precision";
			}
		}

		int handleErrorCode(int errorCode, int resultErrorCode){
			if (errorCode > 0) {
				if (resultErrorCode > 0) {
					resultErrorCode = 16;
				} else {
					resultErrorCode = errorCode;
				}
			}
			return resultErrorCode;
		}

		String handleErrorMessage(String errorMessage, String resultErrorMessage, String columnLabel){
			if (errorMessage.length() > 0) {
				if (resultErrorMessage.length() > 0) {
					resultErrorMessage += ";"+ errorMessage.replaceFirst("\\|", columnLabel);
				} else {
					resultErrorMessage = errorMessage.replaceFirst("\\|", columnLabel);
				}
			}
			return resultErrorMessage;
		}

		void reset(){
			ifPassedThrough = true;
			errorCodeThrough = 0;
			errorMessageThrough = "";
			resultErrorCodeThrough = 0;
			resultErrorMessageThrough = "";
			tmpContentThrough = null;

			ifPassed = true;
			errorCode = 0;
			errorMessage = "";
		}

		void setRowValue_0(row1Struct row1) {
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"id_Ing:");
			errorMessageThrough = "";	try {
		if(
		row1.NOM_COMPLET != null
		&& (!"".equals(row1.NOM_COMPLET))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row1.NOM_COMPLET);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"NOM_COMPLET:");
			errorMessageThrough = "";
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"SALAIRE_TRAITER:");
			errorMessageThrough = "";
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"SALAIRE:");
			errorMessageThrough = "";	try {
		if(
		row1.AUGMENTION != null
		&& (!"".equals(row1.AUGMENTION))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row1.AUGMENTION);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"AUGMENTION:");
			errorMessageThrough = "";	try {
		if(
		row1.DATE_EMBAUCHE != null
		&& (!"".equals(row1.DATE_EMBAUCHE))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row1.DATE_EMBAUCHE);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
	if (
	row1.DATE_EMBAUCHE != null 
	&& (!"".equals(row1.DATE_EMBAUCHE))					
	) {
		if (row1.DATE_EMBAUCHE.length() > 20) {
			ifPassedThrough = false;
			errorCodeThrough += 8;
			errorMessageThrough += "|exceed max length";
		}
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"DATE_EMBAUCHE:");
			errorMessageThrough = "";	try {
		if(
		row1.VILLE != null
		&& (!"".equals(row1.VILLE))
		) {
			String tester_tSchemaComplianceCheck_1 = String.valueOf(row1.VILLE);
		}
	} catch(java.lang.Exception e) {
		ifPassedThrough = false;
		errorCodeThrough += 2;
		errorMessageThrough += "|wrong type";
	}
			resultErrorCodeThrough = handleErrorCode(errorCodeThrough,resultErrorCodeThrough);
			errorCodeThrough = 0;
			resultErrorMessageThrough = handleErrorMessage(errorMessageThrough,resultErrorMessageThrough,"VILLE:");
			errorMessageThrough = "";
		}
	}
	RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

 



/**
 * [tSchemaComplianceCheck_1 begin ] stop
 */




	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = context.Connexion_Postgres_Schema;
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "INGENIEUR_DATA_TRAITER";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "INGENIEUR_DATA_TRAITER";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.Connexion_Postgres_Server+":"+context.Connexion_Postgres_Port+"/"+context.Connexion_Postgres_Database;
    dbUser_tPostgresqlOutput_1 = context.Connexion_Postgres_Login;

	final String decryptedPassword_tPostgresqlOutput_1 = context.Connexion_Postgres_Password; 

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"id_Ing\",\"NOM_COMPLET\",\"SALAIRE_TRAITER\",\"SALAIRE\",\"AUGMENTION\",\"DATE_EMBAUCHE\",\"VILLE\") VALUES (?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */





	
	/**
	 * [tSortRow_2_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortOut", false);
		start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DATA_TRAITEMENT_SALAIRE" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_2_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_2_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_2_SortOut().limitLog4jByte();


class ComparableDATA_TRAITEMENT_SALAIREStruct extends DATA_TRAITEMENT_SALAIREStruct implements Comparable<ComparableDATA_TRAITEMENT_SALAIREStruct> {
	
	public int compareTo(ComparableDATA_TRAITEMENT_SALAIREStruct other) {

		if(this.CARACTERISTIQUE_SALAIRE == null && other.CARACTERISTIQUE_SALAIRE != null){
			return -1;
						
		}else if(this.CARACTERISTIQUE_SALAIRE != null && other.CARACTERISTIQUE_SALAIRE == null){
			return 1;
						
		}else if(this.CARACTERISTIQUE_SALAIRE != null && other.CARACTERISTIQUE_SALAIRE != null){
			if(!this.CARACTERISTIQUE_SALAIRE.equals(other.CARACTERISTIQUE_SALAIRE)){
				return this.CARACTERISTIQUE_SALAIRE.compareTo(other.CARACTERISTIQUE_SALAIRE);
			}
		}
		return 0;
	}
}

java.util.List<ComparableDATA_TRAITEMENT_SALAIREStruct> list_tSortRow_2_SortOut = new java.util.ArrayList<ComparableDATA_TRAITEMENT_SALAIREStruct>();


 



/**
 * [tSortRow_2_SortOut begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
DATA_TRAITEMENT_SALAIREStruct DATA_TRAITEMENT_SALAIRE_tmp = new DATA_TRAITEMENT_SALAIREStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DATA_INGENIEURS_TRAITE" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplicate_1 = 0;
		
    	class BytesLimit65535_tReplicate_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplicate_1().limitLog4jByte();

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("DATA_INGENIEURS" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
DATA_INGENIEURS_TRAITEStruct DATA_INGENIEURS_TRAITE_tmp = new DATA_INGENIEURS_TRAITEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("situation" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ingenieurStruct> tHash_Lookup_ingenieur = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ingenieurStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ingenieurStruct>) 
					globalMap.get( "tHash_Lookup_ingenieur" ))
					;					
					
	

ingenieurStruct ingenieurHashKey = new ingenieurStruct();
ingenieurStruct ingenieurDefault = new ingenieurStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<villesStruct> tHash_Lookup_villes = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<villesStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<villesStruct>) 
					globalMap.get( "tHash_Lookup_villes" ))
					;					
					
	

villesStruct villesHashKey = new villesStruct();
villesStruct villesDefault = new villesStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
DATA_INGENIEURSStruct DATA_INGENIEURS_tmp = new DATA_INGENIEURSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		
    	class BytesLimit65535_tFileInputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();



			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

			        if(useRegex){//this part process the regex issue

				        jxl.Sheet[] sheets = workbook.getSheets();
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (int i = 0; i < sheets.length; i++) {
				            String sheetName = sheets[i].getName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	jxl.Sheet sheet = workbook.getSheet(sheetName);
				            	if(sheet != null){
				                	list.add(sheet);
				                }
				            }
				        }

			        }else{
			        	jxl.Sheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			    	java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			    	jxl.Sheet sheet = workbook.getSheet(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}


		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
		final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
		workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
        workbookSettings_tFileInputExcel_1.setEncoding("ISO-8859-15");

        Object source_tFileInputExcel_1 =context.Inputs+"Situation_Salaire.xls";
        final jxl.Workbook workbook_tFileInputExcel_1;

        java.io.InputStream toClose_tFileInputExcel_1 = null;
        java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
        try {
            if(source_tFileInputExcel_1 instanceof java.io.InputStream){
        		toClose_tFileInputExcel_1 = (java.io.InputStream)source_tFileInputExcel_1;
        		buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
        		workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1, workbookSettings_tFileInputExcel_1);
            }else if(source_tFileInputExcel_1 instanceof String){
        		toClose_tFileInputExcel_1 = new java.io.FileInputStream(source_tFileInputExcel_1.toString());
        		buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
        		workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1, workbookSettings_tFileInputExcel_1);
            }else{
            	workbook_tFileInputExcel_1 = null;
            	throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
            }
        } finally {
			try{
			   if(buffIStreamtFileInputExcel_1 != null){
			   	  buffIStreamtFileInputExcel_1.close();
			   }
			}catch(Exception e){
			}
        }
        try {
		java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = java.util.Arrays.<jxl.Sheet> asList(workbook_tFileInputExcel_1.getSheets());
        if(sheetList_tFileInputExcel_1.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }

        java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
        for(jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1){
        	if(sheet_FilterNull_tFileInputExcel_1.getRows()>0){
        		sheet_FilterNullList_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
        	}
        }
		sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
        int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(jxl.Sheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
        	end_line_tFileInputExcel_1+=sheet_tFileInputExcel_1.getRows();
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getColumns();
        jxl.Cell[] row_tFileInputExcel_1 = null;
        jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getRows();

        //for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
		char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
		
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRows();
            }
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
        	globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getName());
    		situation = null;
					int tempRowLength_tFileInputExcel_1 = 3;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
//
//end%>
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length : end_column_tFileInputExcel_1;

				java.util.TimeZone zone_tFileInputExcel_1 = java.util.TimeZone.getTimeZone("GMT");
                java.text.SimpleDateFormat sdf_tFileInputExcel_1 = new java.text.SimpleDateFormat("dd-MM-yyyy");
                sdf_tFileInputExcel_1.setTimeZone(zone_tFileInputExcel_1);
                

			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){

				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){

				  jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i + start_column_tFileInputExcel_1];
                        temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getContents();

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}

			boolean whetherReject_tFileInputExcel_1 = false;
			situation = new situationStruct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try {
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "id_situation";
			situation.id_situation = ParserUtils.parseTo_int(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else {
				situation.id_situation = 0;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "id_Ing";
			situation.id_Ing = ParserUtils.parseTo_int(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else {
				situation.id_Ing = 0;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "salaire";
			situation.salaire = ParserUtils.parseTo_int(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else {
				situation.salaire = 0;
				emptyColumnCount_tFileInputExcel_1++;
		}

			nb_line_tFileInputExcel_1++;
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputExcel_1 = true;
                System.err.println(e.getMessage());
                situation = null;
    }

					
		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
// Start of branch "situation"
if(situation != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//situation
			//situation


			
				if(execStat){
					runStat.updateStatOnConnection("situation"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ingenieur" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopingenieur = false;
       		  	    	
       		  	    	
 							ingenieurStruct ingenieurObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_ingenieur__id_Ing = situation.id_Ing ;
	                        		    	if(exprKeyValue_ingenieur__id_Ing == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			ingenieurHashKey.id_Ing = (int)(Integer) exprKeyValue_ingenieur__id_Ing;
                        		    		}
                        		    		

								
		                        	ingenieurHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_ingenieur.lookup( ingenieurHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_ingenieur.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ingenieur != null && tHash_Lookup_ingenieur.getCount(ingenieurHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ingenieur' and it contains more one result from keys :  ingenieur.id_Ing = '" + ingenieurHashKey.id_Ing + "'");
								} // G 071
							

							ingenieurStruct ingenieur = null;
                    		  	 
							   
                    		  	 
	       		  	    	ingenieurStruct fromLookup_ingenieur = null;
							ingenieur = ingenieurDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ingenieur !=null && tHash_Lookup_ingenieur.hasNext()) { // G 099
								
							
								
								fromLookup_ingenieur = tHash_Lookup_ingenieur.next();

							
							
								} // G 099
							
							

							if(fromLookup_ingenieur != null) {
								ingenieur = fromLookup_ingenieur;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "villes" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopvilles = false;
       		  	    	
       		  	    	
 							villesStruct villesObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		villesHashKey.id_ville = ingenieur.id_ville ;
                        		    		

								
		                        	villesHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_villes.lookup( villesHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_villes.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_villes != null && tHash_Lookup_villes.getCount(villesHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'villes' and it contains more one result from keys :  villes.id_ville = '" + villesHashKey.id_ville + "'");
								} // G 071
							

							villesStruct villes = null;
                    		  	 
							   
                    		  	 
	       		  	    	villesStruct fromLookup_villes = null;
							villes = villesDefault;
										 
							
								 
							
							
								if (tHash_Lookup_villes !=null && tHash_Lookup_villes.hasNext()) { // G 099
								
							
								
								fromLookup_villes = tHash_Lookup_villes.next();

							
							
								} // G 099
							
							

							if(fromLookup_villes != null) {
								villes = fromLookup_villes;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

DATA_INGENIEURS = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'DATA_INGENIEURS'
DATA_INGENIEURS_tmp.id_Ing = ingenieur.id_Ing ;
DATA_INGENIEURS_tmp.NOM_COMPLET = StringHandling.UPCASE(ingenieur.prenom + "  " +ingenieur.nom ) ;
DATA_INGENIEURS_tmp.AUGMENTION = ("Rennes").equals(villes.nom_ville)? "FAV" : "DEF" ;
DATA_INGENIEURS_tmp.SALAIRE = situation.salaire ;
DATA_INGENIEURS_tmp.VILLE = villes.nom_ville ;
DATA_INGENIEURS_tmp.DATE_EMBAUCHE = StringHandling.RIGHT(ingenieur.date_Embauche,7) ;
DATA_INGENIEURS = DATA_INGENIEURS_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "DATA_INGENIEURS"
if(DATA_INGENIEURS != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//DATA_INGENIEURS
			//DATA_INGENIEURS


			
				if(execStat){
					runStat.updateStatOnConnection("DATA_INGENIEURS"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

DATA_INGENIEURS_TRAITE = null;


// # Output table : 'DATA_INGENIEURS_TRAITE'
DATA_INGENIEURS_TRAITE_tmp.id_Ing = DATA_INGENIEURS.id_Ing ;
DATA_INGENIEURS_TRAITE_tmp.NOM_COMPLET = DATA_INGENIEURS.NOM_COMPLET ;
DATA_INGENIEURS_TRAITE_tmp.SALAIRE_TRAITER = ("FAV").equals(DATA_INGENIEURS.AUGMENTION) ? DATA_INGENIEURS.SALAIRE + 400 : DATA_INGENIEURS.SALAIRE + 100 ;
DATA_INGENIEURS_TRAITE_tmp.SALAIRE = DATA_INGENIEURS.SALAIRE ;
DATA_INGENIEURS_TRAITE_tmp.AUGMENTION = DATA_INGENIEURS.AUGMENTION ;
DATA_INGENIEURS_TRAITE_tmp.DATE_EMBAUCHE = DATA_INGENIEURS.DATE_EMBAUCHE ;
DATA_INGENIEURS_TRAITE_tmp.VILLE = DATA_INGENIEURS.VILLE ;
DATA_INGENIEURS_TRAITE = DATA_INGENIEURS_TRAITE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "DATA_INGENIEURS_TRAITE"
if(DATA_INGENIEURS_TRAITE != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			//DATA_INGENIEURS_TRAITE
			//DATA_INGENIEURS_TRAITE


			
				if(execStat){
					runStat.updateStatOnConnection("DATA_INGENIEURS_TRAITE"+iterateId,1, 1);
				} 
			

		


	row1 = new row1Struct();
						
	row1.id_Ing = DATA_INGENIEURS_TRAITE.id_Ing;								
	row1.NOM_COMPLET = DATA_INGENIEURS_TRAITE.NOM_COMPLET;								
	row1.SALAIRE_TRAITER = DATA_INGENIEURS_TRAITE.SALAIRE_TRAITER;								
	row1.SALAIRE = DATA_INGENIEURS_TRAITE.SALAIRE;								
	row1.AUGMENTION = DATA_INGENIEURS_TRAITE.AUGMENTION;								
	row1.DATE_EMBAUCHE = DATA_INGENIEURS_TRAITE.DATE_EMBAUCHE;								
	row1.VILLE = DATA_INGENIEURS_TRAITE.VILLE;			
	row4 = new row4Struct();
						
	row4.id_Ing = DATA_INGENIEURS_TRAITE.id_Ing;								
	row4.NOM_COMPLET = DATA_INGENIEURS_TRAITE.NOM_COMPLET;								
	row4.SALAIRE_TRAITER = DATA_INGENIEURS_TRAITE.SALAIRE_TRAITER;								
	row4.SALAIRE = DATA_INGENIEURS_TRAITE.SALAIRE;								
	row4.AUGMENTION = DATA_INGENIEURS_TRAITE.AUGMENTION;								
	row4.DATE_EMBAUCHE = DATA_INGENIEURS_TRAITE.DATE_EMBAUCHE;								
	row4.VILLE = DATA_INGENIEURS_TRAITE.VILLE;			
	row5 = new row5Struct();
						
	row5.id_Ing = DATA_INGENIEURS_TRAITE.id_Ing;								
	row5.NOM_COMPLET = DATA_INGENIEURS_TRAITE.NOM_COMPLET;								
	row5.SALAIRE_TRAITER = DATA_INGENIEURS_TRAITE.SALAIRE_TRAITER;								
	row5.SALAIRE = DATA_INGENIEURS_TRAITE.SALAIRE;								
	row5.AUGMENTION = DATA_INGENIEURS_TRAITE.AUGMENTION;								
	row5.DATE_EMBAUCHE = DATA_INGENIEURS_TRAITE.DATE_EMBAUCHE;								
	row5.VILLE = DATA_INGENIEURS_TRAITE.VILLE;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */

	
	/**
	 * [tSchemaComplianceCheck_1 main ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
	row2 = null;
	rsvUtil_tSchemaComplianceCheck_1.setRowValue_0(row1);
	if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
		row2 = new row2Struct();
		row2.id_Ing = row1.id_Ing;
		row2.NOM_COMPLET = row1.NOM_COMPLET;
		row2.SALAIRE_TRAITER = row1.SALAIRE_TRAITER;
		row2.SALAIRE = row1.SALAIRE;
		row2.AUGMENTION = row1.AUGMENTION;
		row2.DATE_EMBAUCHE = row1.DATE_EMBAUCHE;
		row2.VILLE = row1.VILLE;
	}
	rsvUtil_tSchemaComplianceCheck_1.reset();

 


	tos_count_tSchemaComplianceCheck_1++;

/**
 * [tSchemaComplianceCheck_1 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		



	Comparablerow2Struct arrayRowtSortRow_1_SortOut = new Comparablerow2Struct();

	arrayRowtSortRow_1_SortOut.id_Ing = row2.id_Ing;
	arrayRowtSortRow_1_SortOut.NOM_COMPLET = row2.NOM_COMPLET;
	arrayRowtSortRow_1_SortOut.SALAIRE_TRAITER = row2.SALAIRE_TRAITER;
	arrayRowtSortRow_1_SortOut.SALAIRE = row2.SALAIRE;
	arrayRowtSortRow_1_SortOut.AUGMENTION = row2.AUGMENTION;
	arrayRowtSortRow_1_SortOut.DATE_EMBAUCHE = row2.DATE_EMBAUCHE;
	arrayRowtSortRow_1_SortOut.VILLE = row2.VILLE;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */

} // End of branch "row2"








	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setInt(1, row4.id_Ing);

                    if(row4.NOM_COMPLET == null) {
pstmt_tPostgresqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(2, row4.NOM_COMPLET);
}

                    if(row4.SALAIRE_TRAITER == null) {
pstmt_tPostgresqlOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_1.setInt(3, row4.SALAIRE_TRAITER);
}

                    if(row4.SALAIRE == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_1.setInt(4, row4.SALAIRE);
}

                    if(row4.AUGMENTION == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(5, row4.AUGMENTION);
}

                    if(row4.DATE_EMBAUCHE == null) {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(6, row4.DATE_EMBAUCHE);
}

                    if(row4.VILLE == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, row4.VILLE);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    		if (ne_tPostgresqlOutput_1 != null) {
				    			throw(sqle_tPostgresqlOutput_1);
				    		}else{
				            	throw(e_tPostgresqlOutput_1);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
			    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
			    	String errormessage_tPostgresqlOutput_1;
					if (ne_tPostgresqlOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
						errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
					}else{
						errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
					}
			    	
			    		if (ne_tPostgresqlOutput_1 != null) {
			    			throw(sqle_tPostgresqlOutput_1);
			    		}else{
			            	throw(e_tPostgresqlOutput_1);
			            }
			    	
				}
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */




	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DATA_TRAITEMENT_SALAIRE = null;


// # Output table : 'DATA_TRAITEMENT_SALAIRE'
DATA_TRAITEMENT_SALAIRE_tmp.id_Ing = row5.id_Ing ;
DATA_TRAITEMENT_SALAIRE_tmp.NOM_COMPLET = row5.NOM_COMPLET ;
DATA_TRAITEMENT_SALAIRE_tmp.SALAIRE = row5.SALAIRE ;
DATA_TRAITEMENT_SALAIRE_tmp.SALAIRE_TRAITER = row5.SALAIRE_TRAITER ;
DATA_TRAITEMENT_SALAIRE_tmp.AUGMENTION = row5.AUGMENTION ;
DATA_TRAITEMENT_SALAIRE_tmp.DATE_EMBAUCHE = row5.DATE_EMBAUCHE ;
DATA_TRAITEMENT_SALAIRE_tmp.VILLE = row5.VILLE ;
DATA_TRAITEMENT_SALAIRE_tmp.CARACTERISTIQUE_SALAIRE = Traitement_Salaire.traitement_Salaire(row5.SALAIRE_TRAITER, row5.VILLE) ;
DATA_TRAITEMENT_SALAIRE = DATA_TRAITEMENT_SALAIRE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
// Start of branch "DATA_TRAITEMENT_SALAIRE"
if(DATA_TRAITEMENT_SALAIRE != null) { 



	
	/**
	 * [tSortRow_2_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

			//DATA_TRAITEMENT_SALAIRE
			//DATA_TRAITEMENT_SALAIRE


			
				if(execStat){
					runStat.updateStatOnConnection("DATA_TRAITEMENT_SALAIRE"+iterateId,1, 1);
				} 
			

		



	ComparableDATA_TRAITEMENT_SALAIREStruct arrayRowtSortRow_2_SortOut = new ComparableDATA_TRAITEMENT_SALAIREStruct();

	arrayRowtSortRow_2_SortOut.id_Ing = DATA_TRAITEMENT_SALAIRE.id_Ing;
	arrayRowtSortRow_2_SortOut.NOM_COMPLET = DATA_TRAITEMENT_SALAIRE.NOM_COMPLET;
	arrayRowtSortRow_2_SortOut.SALAIRE = DATA_TRAITEMENT_SALAIRE.SALAIRE;
	arrayRowtSortRow_2_SortOut.SALAIRE_TRAITER = DATA_TRAITEMENT_SALAIRE.SALAIRE_TRAITER;
	arrayRowtSortRow_2_SortOut.AUGMENTION = DATA_TRAITEMENT_SALAIRE.AUGMENTION;
	arrayRowtSortRow_2_SortOut.DATE_EMBAUCHE = DATA_TRAITEMENT_SALAIRE.DATE_EMBAUCHE;
	arrayRowtSortRow_2_SortOut.VILLE = DATA_TRAITEMENT_SALAIRE.VILLE;
	arrayRowtSortRow_2_SortOut.CARACTERISTIQUE_SALAIRE = DATA_TRAITEMENT_SALAIRE.CARACTERISTIQUE_SALAIRE;	
	list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

 


	tos_count_tSortRow_2_SortOut++;

/**
 * [tSortRow_2_SortOut main ] stop
 */

} // End of branch "DATA_TRAITEMENT_SALAIRE"








} // End of branch "DATA_INGENIEURS_TRAITE"





} // End of branch "DATA_INGENIEURS"





} // End of branch "situation"




	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
					if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
						workbook_tFileInputExcel_1.close();
					}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ingenieur != null) {
						tHash_Lookup_ingenieur.endGet();
					}
					globalMap.remove( "tHash_Lookup_ingenieur" );

					
					
				
					if(tHash_Lookup_villes != null) {
						tHash_Lookup_villes.endGet();
					}
					globalMap.remove( "tHash_Lookup_villes" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("situation"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DATA_INGENIEURS"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DATA_INGENIEURS_TRAITE"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tSchemaComplianceCheck_1 end ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSchemaComplianceCheck_1", true);
end_Hash.put("tSchemaComplianceCheck_1", System.currentTimeMillis());




/**
 * [tSchemaComplianceCheck_1 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row2Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow2Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputXML_1", false);
		start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputXML_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputXML_1 = 0;
		
    	class BytesLimit65535_tFileOutputXML_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputXML_1().limitLog4jByte();


	String originalFileName_tFileOutputXML_1 = context.Outputs+"INGENIEUR_DATA_TRAITER.xml";
	java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1); 

	String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
	java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1); 
	if(!file_tFileOutputXML_1.isAbsolute()) {
		file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
	}

	//create directory only if not exists
	
	file_tFileOutputXML_1.getParentFile().mkdirs();
	
	String[] headers_tFileOutputXML_1 = new String[2];
		
	headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\""+"ISO-8859-15"+"\"?>";  

	String[] footers_tFileOutputXML_1 = new String[1];

	headers_tFileOutputXML_1[1] = "<"+"root"+">";

	footers_tFileOutputXML_1[0] = "</"+"root"+">";


	int nb_line_tFileOutputXML_1 = 0;


	java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_tFileOutputXML_1), "ISO-8859-15"));

	out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
	out_tFileOutputXML_1.newLine();	
	out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
	out_tFileOutputXML_1.newLine();	

 



/**
 * [tFileOutputXML_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_1_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_1_SortIn().limitLog4jByte();


row2Struct[] array_tSortRow_1_SortIn = (row2Struct[]) globalMap.get("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row2Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row3.id_Ing = current_tSortRow_1_SortIn.id_Ing;
	row3.NOM_COMPLET = current_tSortRow_1_SortIn.NOM_COMPLET;
	row3.SALAIRE_TRAITER = current_tSortRow_1_SortIn.SALAIRE_TRAITER;
	row3.SALAIRE = current_tSortRow_1_SortIn.SALAIRE;
	row3.AUGMENTION = current_tSortRow_1_SortIn.AUGMENTION;
	row3.DATE_EMBAUCHE = current_tSortRow_1_SortIn.DATE_EMBAUCHE;
	row3.VILLE = current_tSortRow_1_SortIn.VILLE;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */

	
	/**
	 * [tFileOutputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<"+"salarie");
tempRes_tFileOutputXML_1.append(">");
out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"id_Ing"+">"+row3.id_Ing+"</"+"id_Ing"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"NOM_COMPLET"+">"+((row3.NOM_COMPLET == null)?"":(TalendString.checkCDATAForXML(row3.NOM_COMPLET)))+"</"+"NOM_COMPLET"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"SALAIRE_TRAITER"+">"+((row3.SALAIRE_TRAITER == null)?"":(row3.SALAIRE_TRAITER))+"</"+"SALAIRE_TRAITER"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"SALAIRE"+">"+((row3.SALAIRE == null)?"":(row3.SALAIRE))+"</"+"SALAIRE"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"AUGMENTION"+">"+((row3.AUGMENTION == null)?"":(TalendString.checkCDATAForXML(row3.AUGMENTION)))+"</"+"AUGMENTION"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"DATE_EMBAUCHE"+">"+((row3.DATE_EMBAUCHE == null)?"":(TalendString.checkCDATAForXML(row3.DATE_EMBAUCHE)))+"</"+"DATE_EMBAUCHE"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"VILLE"+">"+((row3.VILLE == null)?"":(TalendString.checkCDATAForXML(row3.VILLE)))+"</"+"VILLE"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("</"+"salarie"+">");

out_tFileOutputXML_1.newLine();


nb_line_tFileOutputXML_1++;

 


	tos_count_tFileOutputXML_1++;

/**
 * [tFileOutputXML_1 main ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

	out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

	out_tFileOutputXML_1.newLine();
	out_tFileOutputXML_1.close();
globalMap.put("tFileOutputXML_1_NB_LINE",nb_line_tFileOutputXML_1);
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputXML_1", true);
end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());




/**
 * [tFileOutputXML_1 end ] stop
 */













	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    		if (ne_tPostgresqlOutput_1 != null) {
	    			throw(sqle_tPostgresqlOutput_1);
	    		}else{
	            	throw(e_tPostgresqlOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */




	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

DATA_TRAITEMENT_SALAIREStruct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new ComparableDATA_TRAITEMENT_SALAIREStruct[0]);

java.util.Arrays.sort(array_tSortRow_2_SortOut);

globalMap.put("tSortRow_2",array_tSortRow_2_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("DATA_TRAITEMENT_SALAIRE"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_2_SortOut", true);
end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_2_SortOut end ] stop
 */


	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_2().limitLog4jByte();





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = context.Connexion_Postgres_Schema;
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "DATA_TRAITEMENT_SALAIRE";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "DATA_TRAITEMENT_SALAIRE";
}

int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_2 = "jdbc:postgresql://"+context.Connexion_Postgres_Server+":"+context.Connexion_Postgres_Port+"/"+context.Connexion_Postgres_Database;
    dbUser_tPostgresqlOutput_2 = context.Connexion_Postgres_Login;

	final String decryptedPassword_tPostgresqlOutput_2 = context.Connexion_Postgres_Password; 

    String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

    conn_tPostgresqlOutput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_2,dbUser_tPostgresqlOutput_2,dbPwd_tPostgresqlOutput_2);
	
	resourceMap.put("conn_tPostgresqlOutput_2", conn_tPostgresqlOutput_2);
        conn_tPostgresqlOutput_2.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_2 = 10000;
        int commitCounter_tPostgresqlOutput_2 = 0;


   int batchSize_tPostgresqlOutput_2 = 10000;
   int batchSizeCounter_tPostgresqlOutput_2=0;

int count_tPostgresqlOutput_2=0;
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"id_Ing\",\"NOM_COMPLET\",\"SALAIRE\",\"SALAIRE_TRAITER\",\"AUGMENTION\",\"DATE_EMBAUCHE\",\"VILLE\",\"CARACTERISTIQUE_SALAIRE\") VALUES (?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortIn", false);
		start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	
		int tos_count_tSortRow_2_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_2_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_2_SortIn().limitLog4jByte();


DATA_TRAITEMENT_SALAIREStruct[] array_tSortRow_2_SortIn = (DATA_TRAITEMENT_SALAIREStruct[]) globalMap.get("tSortRow_2");

int nb_line_tSortRow_2_SortIn = 0;

DATA_TRAITEMENT_SALAIREStruct current_tSortRow_2_SortIn = null;

for(int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++){
	current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
	row6.id_Ing = current_tSortRow_2_SortIn.id_Ing;
	row6.NOM_COMPLET = current_tSortRow_2_SortIn.NOM_COMPLET;
	row6.SALAIRE = current_tSortRow_2_SortIn.SALAIRE;
	row6.SALAIRE_TRAITER = current_tSortRow_2_SortIn.SALAIRE_TRAITER;
	row6.AUGMENTION = current_tSortRow_2_SortIn.AUGMENTION;
	row6.DATE_EMBAUCHE = current_tSortRow_2_SortIn.DATE_EMBAUCHE;
	row6.VILLE = current_tSortRow_2_SortIn.VILLE;
	row6.CARACTERISTIQUE_SALAIRE = current_tSortRow_2_SortIn.CARACTERISTIQUE_SALAIRE;
	// increase number of line sorted
	nb_line_tSortRow_2_SortIn++;

 



/**
 * [tSortRow_2_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 


	tos_count_tSortRow_2_SortIn++;

/**
 * [tSortRow_2_SortIn main ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    pstmt_tPostgresqlOutput_2.setInt(1, row6.id_Ing);

                    if(row6.NOM_COMPLET == null) {
pstmt_tPostgresqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(2, row6.NOM_COMPLET);
}

                    if(row6.SALAIRE == null) {
pstmt_tPostgresqlOutput_2.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_2.setInt(3, row6.SALAIRE);
}

                    if(row6.SALAIRE_TRAITER == null) {
pstmt_tPostgresqlOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_2.setInt(4, row6.SALAIRE_TRAITER);
}

                    if(row6.AUGMENTION == null) {
pstmt_tPostgresqlOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(5, row6.AUGMENTION);
}

                    if(row6.DATE_EMBAUCHE == null) {
pstmt_tPostgresqlOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(6, row6.DATE_EMBAUCHE);
}

                    if(row6.VILLE == null) {
pstmt_tPostgresqlOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(7, row6.VILLE);
}

                    if(row6.CARACTERISTIQUE_SALAIRE == null) {
pstmt_tPostgresqlOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(8, row6.CARACTERISTIQUE_SALAIRE);
}

			
    		pstmt_tPostgresqlOutput_2.addBatch();
    		nb_line_tPostgresqlOutput_2++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_2++;
    		  
    			if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
                try {
						int countSum_tPostgresqlOutput_2 = 0;
						    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
				    	
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
				    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
				    	String errormessage_tPostgresqlOutput_2;
						if (ne_tPostgresqlOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
							errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
						}else{
							errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
						}
				    	
				    		if (ne_tPostgresqlOutput_2 != null) {
				    			throw(sqle_tPostgresqlOutput_2);
				    		}else{
				            	throw(e_tPostgresqlOutput_2);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_2++;
                if(commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {
                if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSizeCounter_tPostgresqlOutput_2 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_2 = 0;
                		    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
            	    	
                batchSizeCounter_tPostgresqlOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
			    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
			    	String errormessage_tPostgresqlOutput_2;
					if (ne_tPostgresqlOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
						errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
					}else{
						errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
					}
			    	
			    		if (ne_tPostgresqlOutput_2 != null) {
			    			throw(sqle_tPostgresqlOutput_2);
			    		}else{
			            	throw(e_tPostgresqlOutput_2);
			            }
			    	
				}
            }
                	conn_tPostgresqlOutput_2.commit();
                	
                	commitCounter_tPostgresqlOutput_2=0;
                }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	


}

globalMap.put("tSortRow_2_SortIn_NB_LINE",nb_line_tSortRow_2_SortIn);

 

ok_Hash.put("tSortRow_2_SortIn", true);
end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_2_SortIn end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	    try {
				int countSum_tPostgresqlOutput_2 = 0;
				if (pstmt_tPostgresqlOutput_2 != null && batchSizeCounter_tPostgresqlOutput_2 > 0) {
						
					for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_2){
	    	java.sql.SQLException ne_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getNextException(),sqle_tPostgresqlOutput_2=null;
	    	String errormessage_tPostgresqlOutput_2;
			if (ne_tPostgresqlOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_2 = new java.sql.SQLException(e_tPostgresqlOutput_2.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_2.getMessage(), ne_tPostgresqlOutput_2.getSQLState(), ne_tPostgresqlOutput_2.getErrorCode(), ne_tPostgresqlOutput_2);
				errormessage_tPostgresqlOutput_2 = sqle_tPostgresqlOutput_2.getMessage();
			}else{
				errormessage_tPostgresqlOutput_2 = e_tPostgresqlOutput_2.getMessage();
			}
	    	
	    		if (ne_tPostgresqlOutput_2 != null) {
	    			throw(sqle_tPostgresqlOutput_2);
	    		}else{
	            	throw(e_tPostgresqlOutput_2);
	            }
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_2 != null) {
            pstmt_tPostgresqlOutput_2.close();
        }

			
			conn_tPostgresqlOutput_2.commit();
			
		
    	conn_tPostgresqlOutput_2 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_2", true);
    	

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_2 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_2_SortIn"
							globalMap.remove("tSortRow_2");
						
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ingenieur"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_villes"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tSchemaComplianceCheck_1 finally ] start
	 */

	

	
	
	currentComponent="tSchemaComplianceCheck_1";

	

 



/**
 * [tSchemaComplianceCheck_1 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

 



/**
 * [tFileOutputXML_1 finally ] stop
 */













	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1");
					
					
            		
					ctn_tPostgresqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */




	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_2")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_2 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_2");
					
					
            		
					ctn_tPostgresqlOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
					String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :" + sqlEx_tPostgresqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_2);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class ingenieurStruct implements routines.system.IPersistableComparableLookupRow<ingenieurStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id_Ing;

				public int getId_Ing () {
					return this.id_Ing;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String prenom;

				public String getPrenom () {
					return this.prenom;
				}
				
			    public int id_ville;

				public int getId_ville () {
					return this.id_ville;
				}
				
			    public String date_Embauche;

				public String getDate_Embauche () {
					return this.date_Embauche;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_Ing;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ingenieurStruct other = (ingenieurStruct) obj;
		
						if (this.id_Ing != other.id_Ing)
							return false;
					

		return true;
    }

	public void copyDataTo(ingenieurStruct other) {

		other.id_Ing = this.id_Ing;
	            other.nom = this.nom;
	            other.prenom = this.prenom;
	            other.id_ville = this.id_ville;
	            other.date_Embauche = this.date_Embauche;
	            
	}

	public void copyKeysDataTo(ingenieurStruct other) {

		other.id_Ing = this.id_Ing;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
			        this.id_Ing = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id_Ing);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nom = readString(dis,ois);
					
						this.prenom = readString(dis,ois);
					
			            this.id_ville = dis.readInt();
					
						this.date_Embauche = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nom, dos, oos);
					
						writeString(this.prenom, dos, oos);
					
		            	dos.writeInt(this.id_ville);
					
						writeString(this.date_Embauche, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_Ing="+String.valueOf(id_Ing));
		sb.append(",nom="+nom);
		sb.append(",prenom="+prenom);
		sb.append(",id_ville="+String.valueOf(id_ville));
		sb.append(",date_Embauche="+date_Embauche);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ingenieurStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_Ing, other.id_Ing);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ingenieurStruct ingenieur = new ingenieurStruct();




	
	/**
	 * [tAdvancedHash_ingenieur begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ingenieur", false);
		start_Hash.put("tAdvancedHash_ingenieur", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ingenieur";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ingenieur" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ingenieur = 0;
		
    	class BytesLimit65535_tAdvancedHash_ingenieur{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ingenieur().limitLog4jByte();

			   		// connection name:ingenieur
			   		// source node:tFileInputDelimited_1 - inputs:(after_tFileInputExcel_1) outputs:(ingenieur,ingenieur) | target node:tAdvancedHash_ingenieur - inputs:(ingenieur) outputs:()
			   		// linked node: tMap_1 - inputs:(situation,ingenieur,villes) outputs:(DATA_INGENIEURS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ingenieur = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ingenieurStruct> tHash_Lookup_ingenieur =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ingenieurStruct>getLookup(matchingModeEnum_ingenieur);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ingenieur", tHash_Lookup_ingenieur);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ingenieur begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.Inputs+"Ingenieurs.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.Inputs+"Ingenieurs.csv", "ISO-8859-15",";","\n",true,1,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						ingenieur = null;			
									
			    						ingenieur = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									ingenieur = new ingenieurStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								ingenieur.id_Ing = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'id_Ing' in 'ingenieur' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							ingenieur.nom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							ingenieur.prenom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								ingenieur.id_ville = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'id_ville' in 'ingenieur' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							ingenieur.date_Embauche = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					ingenieur = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "ingenieur"
if(ingenieur != null) { 



	
	/**
	 * [tAdvancedHash_ingenieur main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ingenieur";

	

			//ingenieur
			//ingenieur


			
				if(execStat){
					runStat.updateStatOnConnection("ingenieur"+iterateId,1, 1);
				} 
			

		


			   
			   

					ingenieurStruct ingenieur_HashRow = new ingenieurStruct();
		   	   	   
				
				ingenieur_HashRow.id_Ing = ingenieur.id_Ing;
				
				ingenieur_HashRow.nom = ingenieur.nom;
				
				ingenieur_HashRow.prenom = ingenieur.prenom;
				
				ingenieur_HashRow.id_ville = ingenieur.id_ville;
				
				ingenieur_HashRow.date_Embauche = ingenieur.date_Embauche;
				
			tHash_Lookup_ingenieur.put(ingenieur_HashRow);
			
            




 


	tos_count_tAdvancedHash_ingenieur++;

/**
 * [tAdvancedHash_ingenieur main ] stop
 */

} // End of branch "ingenieur"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.Inputs+"Ingenieurs.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ingenieur end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ingenieur";

	

tHash_Lookup_ingenieur.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ingenieur"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ingenieur", true);
end_Hash.put("tAdvancedHash_ingenieur", System.currentTimeMillis());




/**
 * [tAdvancedHash_ingenieur end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ingenieur finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ingenieur";

	

 



/**
 * [tAdvancedHash_ingenieur finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class villesStruct implements routines.system.IPersistableComparableLookupRow<villesStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Fonction_Transformation_Et_Condition = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id_ville;

				public Integer getId_ville () {
					return this.id_ville;
				}
				
			    public String nom_ville;

				public String getNom_ville () {
					return this.nom_ville;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_ville == null) ? 0 : this.id_ville.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final villesStruct other = (villesStruct) obj;
		
						if (this.id_ville == null) {
							if (other.id_ville != null)
								return false;
						
						} else if (!this.id_ville.equals(other.id_ville))
						
							return false;
					

		return true;
    }

	public void copyDataTo(villesStruct other) {

		other.id_ville = this.id_ville;
	            other.nom_ville = this.nom_ville;
	            
	}

	public void copyKeysDataTo(villesStruct other) {

		other.id_ville = this.id_ville;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Fonction_Transformation_Et_Condition) {

        	try {

        		int length = 0;
		
						this.id_ville = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id_ville,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nom_ville = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nom_ville, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_ville="+String.valueOf(id_ville));
		sb.append(",nom_ville="+nom_ville);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(villesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_ville, other.id_ville);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		villesStruct villes = new villesStruct();




	
	/**
	 * [tAdvancedHash_villes begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_villes", false);
		start_Hash.put("tAdvancedHash_villes", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_villes";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("villes" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_villes = 0;
		
    	class BytesLimit65535_tAdvancedHash_villes{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_villes().limitLog4jByte();

			   		// connection name:villes
			   		// source node:tPostgresqlInput_1 - inputs:(after_tFileInputExcel_1) outputs:(villes,villes) | target node:tAdvancedHash_villes - inputs:(villes) outputs:()
			   		// linked node: tMap_1 - inputs:(situation,ingenieur,villes) outputs:(DATA_INGENIEURS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_villes = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<villesStruct> tHash_Lookup_villes =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<villesStruct>getLookup(matchingModeEnum_villes);
	   						   
		   	   	   globalMap.put("tHash_Lookup_villes", tHash_Lookup_villes);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_villes begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
				
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "SELECT \n  \""+context.Connexion_Postgres_Database+"\".\""+context.Connexion_Postgres_Schema+"\".\"Ville\".\"id_ville\", \n  \""+context.Connexion_Postgres_Database+"\".\""+context.Connexion_Postgres_Schema+"\".\"Ville\".\"nom_ville\"\nFROM \""+context.Connexion_Postgres_Database+"\".\""+context.Connexion_Postgres_Schema+"\".\"Ville\"";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								villes.id_ville = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                villes.id_ville = rs_tPostgresqlInput_1.getInt(1);
            } else {
                    villes.id_ville = null;
            }
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								villes.nom_ville = null;
							} else {
	                         		
        	villes.nom_ville = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_villes main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_villes";

	

			//villes
			//villes


			
				if(execStat){
					runStat.updateStatOnConnection("villes"+iterateId,1, 1);
				} 
			

		


			   
			   

					villesStruct villes_HashRow = new villesStruct();
		   	   	   
				
				villes_HashRow.id_ville = villes.id_ville;
				
				villes_HashRow.nom_ville = villes.nom_ville;
				
			tHash_Lookup_villes.put(villes_HashRow);
			
            




 


	tos_count_tAdvancedHash_villes++;

/**
 * [tAdvancedHash_villes main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_villes end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_villes";

	

tHash_Lookup_villes.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("villes"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_villes", true);
end_Hash.put("tAdvancedHash_villes", System.currentTimeMillis());




/**
 * [tAdvancedHash_villes end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_villes finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_villes";

	

 



/**
 * [tAdvancedHash_villes finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlClose_1", false);
		start_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlClose_1";

	
		int tos_count_tPostgresqlClose_1 = 0;
		
    	class BytesLimit65535_tPostgresqlClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlClose_1().limitLog4jByte();

 



/**
 * [tPostgresqlClose_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlClose_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlClose_1";

	



	java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
	if(conn_tPostgresqlClose_1 != null && !conn_tPostgresqlClose_1.isClosed())
	{
        conn_tPostgresqlClose_1.close();
	}

 


	tos_count_tPostgresqlClose_1++;

/**
 * [tPostgresqlClose_1 main ] stop
 */
	
	/**
	 * [tPostgresqlClose_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlClose_1";

	

 

ok_Hash.put("tPostgresqlClose_1", true);
end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());




/**
 * [tPostgresqlClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlClose_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlClose_1";

	

 



/**
 * [tPostgresqlClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Fonction_Transformation_Et_Condition Fonction_Transformation_Et_ConditionClass = new Fonction_Transformation_Et_Condition();

        int exitCode = Fonction_Transformation_Et_ConditionClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Fonction_Transformation_Et_Condition.class.getClassLoader().getResourceAsStream("formation_talend/fonction_transformation_et_condition_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("Inputs", "id_Directory");
				
                context.Inputs=(String) context.getProperty("Inputs");
				    context.setContextType("Outputs", "id_Directory");
				
                context.Outputs=(String) context.getProperty("Outputs");
				    context.setContextType("Connexion_Postgres_Database", "id_String");
				
                context.Connexion_Postgres_Database=(String) context.getProperty("Connexion_Postgres_Database");
				    context.setContextType("Connexion_Postgres_Password", "id_Password");
				
            		String pwd_Connexion_Postgres_Password_value = context.getProperty("Connexion_Postgres_Password");
            		context.Connexion_Postgres_Password = null;
            		if(pwd_Connexion_Postgres_Password_value!=null) {
            			if(context_param.containsKey("Connexion_Postgres_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Connexion_Postgres_Password = pwd_Connexion_Postgres_Password_value;
            			} else if (!pwd_Connexion_Postgres_Password_value.isEmpty()) {
            				try {
            					context.Connexion_Postgres_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Connexion_Postgres_Password_value);
            					context.put("Connexion_Postgres_Password",context.Connexion_Postgres_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Connexion_Postgres_Login", "id_String");
				
                context.Connexion_Postgres_Login=(String) context.getProperty("Connexion_Postgres_Login");
				    context.setContextType("Connexion_Postgres_Port", "id_String");
				
                context.Connexion_Postgres_Port=(String) context.getProperty("Connexion_Postgres_Port");
				    context.setContextType("Connexion_Postgres_Server", "id_String");
				
                context.Connexion_Postgres_Server=(String) context.getProperty("Connexion_Postgres_Server");
				    context.setContextType("Connexion_Postgres_Schema", "id_String");
				
                context.Connexion_Postgres_Schema=(String) context.getProperty("Connexion_Postgres_Schema");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Inputs")) {
                context.Inputs = (String) parentContextMap.get("Inputs");
            }if (parentContextMap.containsKey("Outputs")) {
                context.Outputs = (String) parentContextMap.get("Outputs");
            }if (parentContextMap.containsKey("Connexion_Postgres_Database")) {
                context.Connexion_Postgres_Database = (String) parentContextMap.get("Connexion_Postgres_Database");
            }if (parentContextMap.containsKey("Connexion_Postgres_Password")) {
                context.Connexion_Postgres_Password = (java.lang.String) parentContextMap.get("Connexion_Postgres_Password");
            }if (parentContextMap.containsKey("Connexion_Postgres_Login")) {
                context.Connexion_Postgres_Login = (String) parentContextMap.get("Connexion_Postgres_Login");
            }if (parentContextMap.containsKey("Connexion_Postgres_Port")) {
                context.Connexion_Postgres_Port = (String) parentContextMap.get("Connexion_Postgres_Port");
            }if (parentContextMap.containsKey("Connexion_Postgres_Server")) {
                context.Connexion_Postgres_Server = (String) parentContextMap.get("Connexion_Postgres_Server");
            }if (parentContextMap.containsKey("Connexion_Postgres_Schema")) {
                context.Connexion_Postgres_Schema = (String) parentContextMap.get("Connexion_Postgres_Schema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Connexion_Postgres_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Fonction_Transformation_Et_Condition");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     248357 characters generated by Talend Open Studio for Data Integration 
 *     on the 2 août 2021 19:44:27 CEST
 ************************************************************************************************/