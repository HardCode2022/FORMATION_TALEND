// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package formation_talend.alimentation_table_base_donnees_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Alimentation_Table_Base_Donnees Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Alimentation_Table_Base_Donnees implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(PostgresDataBase != null){
				
					this.setProperty("PostgresDataBase", PostgresDataBase.toString());
				
			}
			
			if(PostgresHote != null){
				
					this.setProperty("PostgresHote", PostgresHote.toString());
				
			}
			
			if(PostgresPassword != null){
				
					this.setProperty("PostgresPassword", PostgresPassword.toString());
				
			}
			
			if(PostgresPort != null){
				
					this.setProperty("PostgresPort", PostgresPort.toString());
				
			}
			
			if(PostgresSchema != null){
				
					this.setProperty("PostgresSchema", PostgresSchema.toString());
				
			}
			
			if(PostgresUser != null){
				
					this.setProperty("PostgresUser", PostgresUser.toString());
				
			}
			
			if(Inputs != null){
				
					this.setProperty("Inputs", Inputs.toString());
				
			}
			
			if(Outputs != null){
				
					this.setProperty("Outputs", Outputs.toString());
				
			}
			
		}

public String PostgresDataBase;
public String getPostgresDataBase(){
	return this.PostgresDataBase;
}
public String PostgresHote;
public String getPostgresHote(){
	return this.PostgresHote;
}
public java.lang.String PostgresPassword;
public java.lang.String getPostgresPassword(){
	return this.PostgresPassword;
}
public String PostgresPort;
public String getPostgresPort(){
	return this.PostgresPort;
}
public String PostgresSchema;
public String getPostgresSchema(){
	return this.PostgresSchema;
}
public String PostgresUser;
public String getPostgresUser(){
	return this.PostgresUser;
}
		public String Inputs;
		public String getInputs(){
			return this.Inputs;
		}
		
		public String Outputs;
		public String getOutputs(){
			return this.Outputs;
		}
		
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Alimentation_Table_Base_Donnees";
	private final String projectName = "FORMATION_TALEND";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Alimentation_Table_Base_Donnees.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Alimentation_Table_Base_Donnees.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class OutputHommeStruct implements routines.system.IPersistableRow<OutputHommeStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public Integer Code_postal;

				public Integer getCode_postal () {
					return this.Code_postal;
				}
				
			    public String Sexe;

				public String getSexe () {
					return this.Sexe;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id == null) ? 0 : this.Id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OutputHommeStruct other = (OutputHommeStruct) obj;
		
						if (this.Id == null) {
							if (other.Id != null)
								return false;
						
						} else if (!this.Id.equals(other.Id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OutputHommeStruct other) {

		other.Id = this.Id;
	            other.Prenom = this.Prenom;
	            other.Nom = this.Nom;
	            other.Date_Naissance = this.Date_Naissance;
	            other.Code_postal = this.Code_postal;
	            other.Sexe = this.Sexe;
	            
	}

	public void copyKeysDataTo(OutputHommeStruct other) {

		other.Id = this.Id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length == 0) {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Prenom = readString(dis);
					
					this.Nom = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
						this.Code_postal = readInteger(dis);
					
					this.Sexe = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// Integer
				
						writeInteger(this.Code_postal,dos);
					
					// String
				
						writeString(this.Sexe,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom="+Nom);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Code_postal="+String.valueOf(Code_postal));
		sb.append(",Sexe="+Sexe);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OutputHommeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id, other.Id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OutputFemmeStruct implements routines.system.IPersistableRow<OutputFemmeStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public Integer Code_postal;

				public Integer getCode_postal () {
					return this.Code_postal;
				}
				
			    public String Sexe;

				public String getSexe () {
					return this.Sexe;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id == null) ? 0 : this.Id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OutputFemmeStruct other = (OutputFemmeStruct) obj;
		
						if (this.Id == null) {
							if (other.Id != null)
								return false;
						
						} else if (!this.Id.equals(other.Id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OutputFemmeStruct other) {

		other.Id = this.Id;
	            other.Prenom = this.Prenom;
	            other.Nom = this.Nom;
	            other.Date_Naissance = this.Date_Naissance;
	            other.Code_postal = this.Code_postal;
	            other.Sexe = this.Sexe;
	            
	}

	public void copyKeysDataTo(OutputFemmeStruct other) {

		other.Id = this.Id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length == 0) {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Prenom = readString(dis);
					
					this.Nom = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
						this.Code_postal = readInteger(dis);
					
					this.Sexe = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// Integer
				
						writeInteger(this.Code_postal,dos);
					
					// String
				
						writeString(this.Sexe,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom="+Nom);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Code_postal="+String.valueOf(Code_postal));
		sb.append(",Sexe="+Sexe);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OutputFemmeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id, other.Id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class InsertionClientsStruct implements routines.system.IPersistableRow<InsertionClientsStruct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public Integer Code_postal;

				public Integer getCode_postal () {
					return this.Code_postal;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id == null) ? 0 : this.Id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final InsertionClientsStruct other = (InsertionClientsStruct) obj;
		
						if (this.Id == null) {
							if (other.Id != null)
								return false;
						
						} else if (!this.Id.equals(other.Id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(InsertionClientsStruct other) {

		other.Id = this.Id;
	            other.Prenom = this.Prenom;
	            other.Nom = this.Nom;
	            other.Date_Naissance = this.Date_Naissance;
	            other.Code_postal = this.Code_postal;
	            
	}

	public void copyKeysDataTo(InsertionClientsStruct other) {

		other.Id = this.Id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length == 0) {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Prenom = readString(dis);
					
					this.Nom = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
						this.Code_postal = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// Integer
				
						writeInteger(this.Code_postal,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom="+Nom);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Code_postal="+String.valueOf(Code_postal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertionClientsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id, other.Id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];

	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public Integer Code_postal;

				public Integer getCode_postal () {
					return this.Code_postal;
				}
				
			    public String Sexe;

				public String getSexe () {
					return this.Sexe;
				}
				
			    public String Marque_Voiture;

				public String getMarque_Voiture () {
					return this.Marque_Voiture;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length == 0) {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Prenom = readString(dis);
					
					this.Nom = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
						this.Code_postal = readInteger(dis);
					
					this.Sexe = readString(dis);
					
					this.Marque_Voiture = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// Integer
				
						writeInteger(this.Code_postal,dos);
					
					// String
				
						writeString(this.Sexe,dos);
					
					// String
				
						writeString(this.Marque_Voiture,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom="+Nom);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Code_postal="+String.valueOf(Code_postal));
		sb.append(",Sexe="+Sexe);
		sb.append(",Marque_Voiture="+Marque_Voiture);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public Integer Code_postal;

				public Integer getCode_postal () {
					return this.Code_postal;
				}
				
			    public String Sexe;

				public String getSexe () {
					return this.Sexe;
				}
				
			    public String Marque_Voiture;

				public String getMarque_Voiture () {
					return this.Marque_Voiture;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id == null) ? 0 : this.Id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;
		
						if (this.Id == null) {
							if (other.Id != null)
								return false;
						
						} else if (!this.Id.equals(other.Id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_1Struct other) {

		other.Id = this.Id;
	            other.Prenom = this.Prenom;
	            other.Nom = this.Nom;
	            other.Date_Naissance = this.Date_Naissance;
	            other.Code_postal = this.Code_postal;
	            other.Sexe = this.Sexe;
	            other.Marque_Voiture = this.Marque_Voiture;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

		other.Id = this.Id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length == 0) {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Prenom = readString(dis);
					
					this.Nom = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
						this.Code_postal = readInteger(dis);
					
					this.Sexe = readString(dis);
					
					this.Marque_Voiture = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// Integer
				
						writeInteger(this.Code_postal,dos);
					
					// String
				
						writeString(this.Sexe,dos);
					
					// String
				
						writeString(this.Marque_Voiture,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom="+Nom);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Code_postal="+String.valueOf(Code_postal));
		sb.append(",Sexe="+Sexe);
		sb.append(",Marque_Voiture="+Marque_Voiture);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id, other.Id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		row1Struct row1 = new row1Struct();
OutputHommeStruct OutputHomme = new OutputHommeStruct();
OutputFemmeStruct OutputFemme = new OutputFemmeStruct();
InsertionClientsStruct InsertionClients = new InsertionClientsStruct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("OutputHomme" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.Outputs+"ClientsHomme1.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("Id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Prenom");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Nom");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Date_Naissance");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Code_postal");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Sexe");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("OutputFemme" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.Outputs+"ClientsFemme1.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("Id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Prenom");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Nom");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Date_Naissance");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Code_postal");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Sexe");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */




	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("InsertionClients" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = context.PostgresSchema;
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "Clients";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "Clients";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.PostgresHote+":"+context.PostgresPort+"/"+context.PostgresDataBase;
    dbUser_tPostgresqlOutput_1 = context.PostgresUser;

	final String decryptedPassword_tPostgresqlOutput_1 = context.PostgresPassword; 

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"Id\",\"Prenom\",\"Nom\",\"Date_Naissance\",\"Code_postal\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
OutputHommeStruct OutputHomme_tmp = new OutputHommeStruct();
OutputFemmeStruct OutputFemme_tmp = new OutputFemmeStruct();
InsertionClientsStruct InsertionClients_tmp = new InsertionClientsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.Inputs+"clients.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.Inputs+"clients.csv", "ISO-8859-15",";","\n",true,1,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Id = ParserUtils.parseTo_Long(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.Id = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.Prenom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.Nom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.Date_Naissance = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.Date_Naissance = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Code_postal = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
								}
    							
						} else {						
							
								row1.Code_postal = null;
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.Sexe = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.Marque_Voiture = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row2HashKey.Id_Sexe = row1.Sexe ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.Id_Sexe = '" + row2HashKey.Id_Sexe + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

OutputHomme = null;
OutputFemme = null;
InsertionClients = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'OutputHomme'
// # Filter conditions 
if( 

"Homme".equals(row2.Libelle )

 ) {
OutputHomme_tmp.Id = row1.Id ;
OutputHomme_tmp.Prenom = row1.Prenom ;
OutputHomme_tmp.Nom = row1.Nom ;
OutputHomme_tmp.Date_Naissance = row1.Date_Naissance ;
OutputHomme_tmp.Code_postal = row1.Code_postal ;
OutputHomme_tmp.Sexe = row2.Libelle ;
OutputHomme = OutputHomme_tmp;
} // closing filter/reject

// # Output table : 'OutputFemme'
// # Filter conditions 
if( 

"Femme".equals(row2.Libelle )

 ) {
OutputFemme_tmp.Id = row1.Id ;
OutputFemme_tmp.Prenom = row1.Prenom ;
OutputFemme_tmp.Nom = row1.Nom ;
OutputFemme_tmp.Date_Naissance = row1.Date_Naissance ;
OutputFemme_tmp.Code_postal = row1.Code_postal ;
OutputFemme_tmp.Sexe = row2.Libelle ;
OutputFemme = OutputFemme_tmp;
} // closing filter/reject

// # Output table : 'InsertionClients'
InsertionClients_tmp.Id = row1.Id ;
InsertionClients_tmp.Prenom = row1.Prenom ;
InsertionClients_tmp.Nom = row1.Nom ;
InsertionClients_tmp.Date_Naissance = row1.Date_Naissance ;
InsertionClients_tmp.Code_postal = row1.Code_postal ;
InsertionClients = InsertionClients_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "OutputHomme"
if(OutputHomme != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//OutputHomme
			//OutputHomme


			
				if(execStat){
					runStat.updateStatOnConnection("OutputHomme"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(OutputHomme.Id != null) {
                        sb_tFileOutputDelimited_1.append(
                            OutputHomme.Id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(OutputHomme.Prenom != null) {
                        sb_tFileOutputDelimited_1.append(
                            OutputHomme.Prenom
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(OutputHomme.Nom != null) {
                        sb_tFileOutputDelimited_1.append(
                            OutputHomme.Nom
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(OutputHomme.Date_Naissance != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(OutputHomme.Date_Naissance, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(OutputHomme.Code_postal != null) {
                        sb_tFileOutputDelimited_1.append(
                            OutputHomme.Code_postal
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(OutputHomme.Sexe != null) {
                        sb_tFileOutputDelimited_1.append(
                            OutputHomme.Sexe
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "OutputHomme"




// Start of branch "OutputFemme"
if(OutputFemme != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//OutputFemme
			//OutputFemme


			
				if(execStat){
					runStat.updateStatOnConnection("OutputFemme"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(OutputFemme.Id != null) {
                        sb_tFileOutputDelimited_2.append(
                            OutputFemme.Id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(OutputFemme.Prenom != null) {
                        sb_tFileOutputDelimited_2.append(
                            OutputFemme.Prenom
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(OutputFemme.Nom != null) {
                        sb_tFileOutputDelimited_2.append(
                            OutputFemme.Nom
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(OutputFemme.Date_Naissance != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(OutputFemme.Date_Naissance, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(OutputFemme.Code_postal != null) {
                        sb_tFileOutputDelimited_2.append(
                            OutputFemme.Code_postal
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(OutputFemme.Sexe != null) {
                        sb_tFileOutputDelimited_2.append(
                            OutputFemme.Sexe
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */

} // End of branch "OutputFemme"




// Start of branch "InsertionClients"
if(InsertionClients != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//InsertionClients
			//InsertionClients


			
				if(execStat){
					runStat.updateStatOnConnection("InsertionClients"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    if(InsertionClients.Id == null) {
pstmt_tPostgresqlOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_1.setLong(1, InsertionClients.Id);
}

                    if(InsertionClients.Prenom == null) {
pstmt_tPostgresqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(2, InsertionClients.Prenom);
}

                    if(InsertionClients.Nom == null) {
pstmt_tPostgresqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(3, InsertionClients.Nom);
}

                    if(InsertionClients.Date_Naissance != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(4, new java.sql.Timestamp(InsertionClients.Date_Naissance.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(InsertionClients.Code_postal == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tPostgresqlOutput_1.setInt(5, InsertionClients.Code_postal);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
				    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
				    	String errormessage_tPostgresqlOutput_1;
						if (ne_tPostgresqlOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
							errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
						}else{
							errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
						}
				    	
				    	int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
				    	System.err.println(errormessage_tPostgresqlOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
			    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
			    	String errormessage_tPostgresqlOutput_1;
					if (ne_tPostgresqlOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
						errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
					}else{
						errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
					}
			    	
			    	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
			    	System.err.println(errormessage_tPostgresqlOutput_1);
			    	
				}
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "InsertionClients"





} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.Inputs+"clients.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("OutputHomme"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("OutputFemme"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */




	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1){
	    	java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getNextException(),sqle_tPostgresqlOutput_1=null;
	    	String errormessage_tPostgresqlOutput_1;
			if (ne_tPostgresqlOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tPostgresqlOutput_1 = new java.sql.SQLException(e_tPostgresqlOutput_1.getMessage() + "\ncaused by: " + ne_tPostgresqlOutput_1.getMessage(), ne_tPostgresqlOutput_1.getSQLState(), ne_tPostgresqlOutput_1.getErrorCode(), ne_tPostgresqlOutput_1);
				errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1.getMessage();
			}else{
				errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1.getMessage();
			}
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e_tPostgresqlOutput_1.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(errormessage_tPostgresqlOutput_1);
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("InsertionClients"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */




	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tPostgresqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1");
					
					
            		
					ctn_tPostgresqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
    static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Id_Sexe;

				public String getId_Sexe () {
					return this.Id_Sexe;
				}
				
			    public String Libelle;

				public String getLibelle () {
					return this.Libelle;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id_Sexe == null) ? 0 : this.Id_Sexe.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.Id_Sexe == null) {
							if (other.Id_Sexe != null)
								return false;
						
						} else if (!this.Id_Sexe.equals(other.Id_Sexe))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.Id_Sexe = this.Id_Sexe;
	            other.Libelle = this.Libelle;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.Id_Sexe = this.Id_Sexe;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length) {
				if(length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees.length == 0) {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[1024];
				} else {
   					commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length);
			strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Table_Base_Donnees, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FORMATION_TALEND_Alimentation_Table_Base_Donnees) {

        	try {

        		int length = 0;
		
					this.Id_Sexe = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id_Sexe,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Libelle = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Libelle, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Sexe="+Id_Sexe);
		sb.append(",Libelle="+Libelle);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Sexe, other.Id_Sexe);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row2().limitLog4jByte();

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(OutputHomme,OutputFemme,InsertionClients)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = context.Inputs+"SexePersonne.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.Inputs+"SexePersonne.csv", "ISO-8859-15",";","\n",true,1,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row2 = null;			
									
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							row2.Id_Sexe = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row2.Libelle = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.Id_Sexe = row2.Id_Sexe;
				
				row2_HashRow.Libelle = row2.Libelle;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.Inputs+"SexePersonne.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Alimentation_Table_Base_Donnees Alimentation_Table_Base_DonneesClass = new Alimentation_Table_Base_Donnees();

        int exitCode = Alimentation_Table_Base_DonneesClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Alimentation_Table_Base_Donnees.class.getClassLoader().getResourceAsStream("formation_talend/alimentation_table_base_donnees_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("PostgresDataBase", "id_String");
				
                context.PostgresDataBase=(String) context.getProperty("PostgresDataBase");
				    context.setContextType("PostgresHote", "id_String");
				
                context.PostgresHote=(String) context.getProperty("PostgresHote");
				    context.setContextType("PostgresPassword", "id_Password");
				
            		String pwd_PostgresPassword_value = context.getProperty("PostgresPassword");
            		context.PostgresPassword = null;
            		if(pwd_PostgresPassword_value!=null) {
            			if(context_param.containsKey("PostgresPassword")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.PostgresPassword = pwd_PostgresPassword_value;
            			} else if (!pwd_PostgresPassword_value.isEmpty()) {
            				try {
            					context.PostgresPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_PostgresPassword_value);
            					context.put("PostgresPassword",context.PostgresPassword);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("PostgresPort", "id_String");
				
                context.PostgresPort=(String) context.getProperty("PostgresPort");
				    context.setContextType("PostgresSchema", "id_String");
				
                context.PostgresSchema=(String) context.getProperty("PostgresSchema");
				    context.setContextType("PostgresUser", "id_String");
				
                context.PostgresUser=(String) context.getProperty("PostgresUser");
				    context.setContextType("Inputs", "id_Directory");
				
                context.Inputs=(String) context.getProperty("Inputs");
				    context.setContextType("Outputs", "id_Directory");
				
                context.Outputs=(String) context.getProperty("Outputs");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("PostgresDataBase")) {
                context.PostgresDataBase = (String) parentContextMap.get("PostgresDataBase");
            }if (parentContextMap.containsKey("PostgresHote")) {
                context.PostgresHote = (String) parentContextMap.get("PostgresHote");
            }if (parentContextMap.containsKey("PostgresPassword")) {
                context.PostgresPassword = (java.lang.String) parentContextMap.get("PostgresPassword");
            }if (parentContextMap.containsKey("PostgresPort")) {
                context.PostgresPort = (String) parentContextMap.get("PostgresPort");
            }if (parentContextMap.containsKey("PostgresSchema")) {
                context.PostgresSchema = (String) parentContextMap.get("PostgresSchema");
            }if (parentContextMap.containsKey("PostgresUser")) {
                context.PostgresUser = (String) parentContextMap.get("PostgresUser");
            }if (parentContextMap.containsKey("Inputs")) {
                context.Inputs = (String) parentContextMap.get("Inputs");
            }if (parentContextMap.containsKey("Outputs")) {
                context.Outputs = (String) parentContextMap.get("Outputs");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("PostgresPassword");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Alimentation_Table_Base_Donnees");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     127976 characters generated by Talend Open Studio for Data Integration 
 *     on the 9 septembre 2018 23:26:49 CEST
 ************************************************************************************************/